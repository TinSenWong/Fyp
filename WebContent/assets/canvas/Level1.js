
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * Level1.
 */
function Level1() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level1_proto = Object.create(Phaser.State.prototype);
Level1.prototype = Level1_proto;
Level1.prototype.constructor = Level1;

Level1.prototype.init = function () {
	
	this.stage.backgroundColor = '#ffffff';
	
};

Level1.prototype.preload = function () {
	
	this.load.pack('maze', 'assets/pack.json');
	
};

Level1.prototype.create = function () {
	
	this.initScene();
	this.world.setBounds(0, 0, 20000, 20000);
	
	var _bottomLayer = this.add.tilemap('bottomLayer', 32, 32);
	_bottomLayer.addTilesetImage('base_out_atlas1');
	var _bottomLayer_layer = _bottomLayer.createLayer(0);
	_bottomLayer_layer.resizeWorld();
	
	var _MidLayer = this.add.tilemap('MidLayer', 32, 32);
	_MidLayer.addTilesetImage('terrain_atlas1');
	var _MidLayer_layer = _MidLayer.createLayer(0);
	_MidLayer_layer.resizeWorld();
	
	var _BlockLayer = this.add.tilemap('BlockLayer', 32, 32);
	_BlockLayer.addTilesetImage('base_out_atlas1');
	_BlockLayer.setCollision([38,234]);
	var _BlockLayer_layer = _BlockLayer.createLayer(0);
	_BlockLayer_layer.resizeWorld();
	
	var _player = this.add.sprite(256.0, 224.0, 'atlas', 'misa-front-walk.000');
	_player.animations.add('Back', ['misa-back-walk.000', 'misa-back-walk.001', 'misa-back-walk.002', 'misa-back-walk.003'], 6, true);
	_player.animations.add('Left', ['misa-left-walk.000', 'misa-left-walk.001', 'misa-left-walk.002', 'misa-left-walk.003'], 6, true);
	_player.animations.add('Front', ['misa-front-walk.000', 'misa-front-walk.001', 'misa-front-walk.002', 'misa-front-walk.003'], 6, true);
	_player.animations.add('Right', ['misa-right-walk.000', 'misa-right-walk.001', 'misa-right-walk.002', 'misa-right-walk.003'], 6, true);
	_player.animations.add('BackStay', ['misa-back'], 6, false);
	_player.animations.add('FrontStay', ['misa-front'], 6, false);
	_player.animations.add('LeftStay', ['misa-left'], 6, false);
	_player.animations.add('RightStay', ['misa-right'], 6, false);
	this.game.physics.arcade.enable(_player);
	_player.body.setSize(32.0, 32.0, 0.0, 32.0);
	
	var _Hole = this.add.group();
	_Hole.position.setTo(0.0, 768.0);
	
	this.add.sprite(512.0, 416.0, 'base_out_atlas', 161, _Hole);
	
	this.add.sprite(544.0, 416.0, 'base_out_atlas', 162, _Hole);
	
	var _Hole2 = this.add.sprite(544.0, 448.0, 'base_out_atlas', 194, _Hole);
	
	var _Hole1 = this.add.sprite(512.0, 448.0, 'base_out_atlas', 193, _Hole);
	
	this.add.sprite(544.0, 480.0, 'base_out_atlas', 226, _Hole);
	
	this.add.sprite(512.0, 480.0, 'base_out_atlas', 225, _Hole);
	
	var _keyYellow = this.add.sprite(320.0, 256.0, 'keyYellow');
	_keyYellow.scale.setTo(0.45714285714285713, 0.45714285714285713);
	this.game.physics.arcade.enable(_keyYellow);
	
	var _treasure_chest = this.add.sprite(384.0, 256.0, 'treasure chest1', 0);
	_treasure_chest.scale.setTo(0.9142857142857143, 0.9142857142857143);
	var _treasure_chest_open = _treasure_chest.animations.add('open', [1, 2, 3, 4, 5, 6], 8, false);
	_treasure_chest_open.killOnComplete = true;
	this.game.physics.arcade.enable(_treasure_chest);
	
	var _block = this.add.group();
	
	this.add.sprite(416.0, 256.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(416.0, 224.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(384.0, 224.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(352.0, 224.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(320.0, 224.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(288.0, 224.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(256.0, 224.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(416.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(384.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(352.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(320.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(288.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(256.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(224.0, 288.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(224.0, 256.0, 'base_out_atlas', 234, _block);
	
	this.add.sprite(224.0, 224.0, 'base_out_atlas', 234, _block);
	
	
	
	// fields
	
	this.fMidLayer = _MidLayer;
	this.fMidLayer_layer = _MidLayer_layer;
	this.fBlockLayer = _BlockLayer;
	this.fBlockLayer_layer = _BlockLayer_layer;
	this.fPlayer = _player;
	this.fHole = _Hole;
	this.fHole2 = _Hole2;
	this.fHole1 = _Hole1;
	this.fKeyYellow = _keyYellow;
	this.fTreasure_chest = _treasure_chest;
	this.fBlock = _block;
	//this.camera.follow(this.fPlayer);
	if (game1Pass){
		this.fPlayer.x = playerX;
		this.fPlayer.y = playerY;
	}
	this.cursors = this.input.keyboard.createCursorKeys();
	this.fPlayer.body.collideWorldBounds=true;
	
};

/* --- end generated code --- */
var map;
var key = false;
Level1.prototype.initScene = function () {
    
};
Level1.prototype.update = function () {
	this.fPlayer.body.velocity.set(0);
	//if (checkOverlap(this.fPlayer,this.fBase_out_atlas2)&&!IsIn){
		//state = this.game.state.getCurrentState();
		//localStorage.setItem ('state',this.game.state.getCurrentState());
	if (this.fKeyYellow.exists){	
		this.physics.arcade.collide(this.fPlayer,this.fKeyYellow, getKey, null, this);
	}
	this.physics.arcade.collide(this.fPlayer,this.fTreasure_chest,IsOpenChest, null, this);
	this.fTreasure_chest.x = 640.0;
	this.fTreasure_chest.y = 256.0;
	
	this.physics.arcade.collide(this.fPlayer,this.fBlockLayer_layer);
	
	if (testmode){
		if (this.cursors.left.isDown)
	    {
	    	// move to the left
	    	this.fPlayer.play('Left');
	    	this.fPlayer.body.velocity.x -= 150;
	    	//this.fPlayer.body.x -= 32;
	    	play = 'LeftStay';
	        
	    }else if (this.cursors.right.isDown)
	    {
	    	// move to the right
	    	this.fPlayer.play('Right');
	    	this.fPlayer.body.velocity.x += 150;
	    	//this.fPlayer.body.x += 32;
	    	play = 'RightStay';
	    }
	    else  if (this.cursors.up.isDown)
	    {
	    	// move to the up
	    	this.fPlayer.play('Back');
	    	this.fPlayer.body.velocity.y -= 150;
	    	//this.fPlayer.body.y -= 32;
	    	play = 'BackStay';
	    }else if (this.cursors.down.isDown)
	    {
	    	// move to the down
	    	this.fPlayer.play('Front');
	    	this.fPlayer.body.velocity.y += 150;
	    	//this.fPlayer.body.y += 32;
	    	play = 'FrontStay';
	    }else{
	    	this.fPlayer.play(play);
	    }

	}
	// set movement value
	if (goToTheLeft){
		playerX = this.fPlayer.x;
		goToTheLeft=false;
		goLeft = true;
		expX = playerX - 32;
	}else if (goToTheRight){
		playerX = this.fPlayer.x;
		goToTheRight=false;
		goRight = true;
		expX = playerX + 32;
	}else if (goToTheUp){
		playerY = this.fPlayer.y;
		goToTheUp=false;
		goUp = true;
		expX = playerY - 32;
	}else if (goToTheDown){
		playerY = this.fPlayer.y;
		goToTheDown=false;
		goDown = true;
		expX = playerY + 32;
	}
	
	
	
	
	
	
	if ( goLeft){// move to the left
		goLeft = false;
		console.log(this.fPlayer.x +"o");
		tween = this.add.tween(this.fPlayer).to({ x: this.fPlayer.x-32 }, 500, Phaser.Easing.Quadratic.InOut, true);
		tween.onStart.add(function(){
            this.physics.arcade.collide(this.fPlayer, this.,function (){
				console.log(this.fPlayer.x);
            });
		},this);
	    	//this.fPlayer.body.x -= 32;
	    	play = 'LeftStay';
    }else if (goRight)// move to the right
    {
    	if (this.fPlayer.x < expX){
			this.fPlayer.body.velocity.x += 90;
		}else{
			goRight=false;
		}
    	
    	//this.fPlayer.body.x += 32;
    	play = 'RightStay';
    }
    else  if (goUp)
    {
    	if (this.fPlayer.y < expY){
			this.fPlayer.body.velocity.y -= 90;
		}else{
			goUp=false;
		}
    	// move to the up
    	//this.fPlayer.body.y -= 32;
    	play = 'BackStay';
    }else if (goDown)
    {
    	if (this.fPlayer.y > expY){
			this.fPlayer.body.velocity.y += 90;
		}else{
			goDown=false;
		}
	    	// move to the down
	    	//this.fPlayer.body.y += 32;
	    	play = 'FrontStay';
    }

};



function checkOverlap(spriteA, spriteB) {
 
    var boundsA = spriteA.getBounds();
    var boundsB = spriteB.getBounds();              
 
    return Phaser.Rectangle.intersects(boundsA, boundsB);
 
}
 
// -- user code here --
var goToTheRight = false;
var goToTheLeft = false;
var goToTheUp = false;
var goToTheDown = false;
var play;
var playerY;
var playerX;
var expX;
var expY; 
var goRight= false;
var goLeft= false;
var goUp= false;
var goDown= false;