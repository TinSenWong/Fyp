
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * breakWallGame.
 */
function breakWallGame() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var breakWallGame_proto = Object.create(Phaser.State.prototype);
breakWallGame.prototype = breakWallGame_proto;
breakWallGame.prototype.constructor = breakWallGame;

breakWallGame.prototype.init = function () {
	
};

breakWallGame.prototype.preload = function () {
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	playerInput = this.add.group();
	weaknessGroup = game.add.group();
	hideGrid(true);
	toolbox = '<xml id="toolbox" style="display: none">';
	toolbox += '  <block type="input"></block>';
	toolbox += '</xml>';
	changeToolbox(toolbox,20);
	limitTime=3;
	round=3;
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	
};

breakWallGame.prototype.create = function () {
	
	this.playerInputMask = game.add.graphics();
	this.playerInputMask.inputEnabled=true;
	this.playerInputMask.beginFill(0x7FFF00);
	this.playerInputMask.drawRect( 100,300,900, 300 );
	this.playerInputMask.endFill();
	this.WeaknessOutputMask = game.add.graphics();
	this.WeaknessOutputMask.inputEnabled=true;
	this.WeaknessOutputMask.beginFill(0x98F5FF);
	this.WeaknessOutputMask.drawRect(100,0,900, 300);
	this.WeaknessOutputMask.endFill();
	this.heartArea = game.add.graphics();
	this.heartArea.inputEnabled=true;
	this.heartArea.beginFill(0x7FFF00);
	this.heartArea.drawRect( 0,0,100,600 );
	addweaknessGroupGame1(randonWeakness(3));
	
	var _worngTime = this.add.text(1000.0, 50.0, 'Worng:'+worngTime, {"font":"bold 28px Arial"});
	var _limitTime = this.add.text(1002.0, 113.0, "Attempts :" + limitTime, {"font":"bold 28px Arial"});
	var _finishTime = this.add.text(997.0, 667.0, 'Finish:'+finish+'/'+round, {"font":"bold 28px Arial"});
	
	this.fWorngTime = _worngTime;
	this.fLimitTime = _limitTime;
	this.fFinishTime = _finishTime;	
	
	var _HPGroup = this.add.group();
	_HPGroup.position.setTo(29.0, 195.0);
	
	var _hp3 = this.add.sprite(-23.0, 32.0, 'hp heart', 0, _HPGroup);
	_hp3.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp3.animations.add('play', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _hp2 = this.add.sprite(-23.0, -68.0, 'hp heart', 0, _HPGroup);
	_hp2.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp2.animations.add('play', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _hp1 = this.add.sprite(-23.0, -168.0, 'hp heart', 0, _HPGroup);
	_hp1.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp1.animations.add('play', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _misa_right = this.add.sprite(33.0, 549.0, 'atlas', 'misa-right');
	_misa_right.scale.setTo(3.4624001776418343, 3.7540000855073545);
	
	this.add.sprite(153.0, 685.0, 'magic');
	
	var _monster = this.add.sprite(991.0, 626.0, 'monster', 'sprite2');
	_monster.scale.setTo(-3.039040655493502, 3.384639910744491);
	var _monster_player = _monster.animations.add('player', ['sprite3', 'sprite4'], 2, true);
	var _monster_destroy = _monster.animations.add('destroy', ['sprite10', 'sprite11', 'sprite12', 'sprite13', 'sprite14', 'sprite9'], 6, false);
	_monster_destroy.killOnComplete = true;
	_monster_player.play();
	
	
	
	// fields
	
	this.fHPGroup = _HPGroup;
	this.fMonster = _monster;
	
};

/* --- end generated code --- */
breakWallGame.prototype.update = function () {
	
	if (checkInput){
		checkInput = false;
		var count=0;
		if (playerInput != null){
			if (playerInput.length==weaknessGroup.length){
				for (i = 0;i<playerInput.children.length;i++){
					//alert(playerInput.length+":"+weaknessGroup.length);
					if (playerInput.children[i].frameName==weaknessGroup.children[i].frameName){
						count+=1;
					}else{
						continue;
					}
				}
			}
			if (count==weaknessGroup.children.length){
				
				if ((finish+1)==round){
					var fireball = this.add.sprite(150.0,700.0, 'fireball', 24);
					fireball.scale.setTo(1.9674997027108243, 1.5625000174710881);
					var fireball_play = fireball.animations.add('play', [32, 33, 34, 35], 10, true);
					fireball_play.play();
					
					tween = this.add.tween(fireball).to({ x: 880, y: 700}, 1000, "Linear", true, 500);   
					tween.onComplete.add(function() {
						fireball.destroy();
						this.fMonster.play('destroy').onComplete.add(function(){
							game1Pass = true;
							this.fFinishTime.setText('Finish:'+ ++finish +'/'+round);
							messageBox(true,300,200,function(){
								finish = 0;
								selectLevel()
							}),this;
						}, this);
					},this);
					
				}else{
					weaknessGroup.destroy();
					finish++;
					game.state.start("breakWallGame");
				}
			}else{
				this.fWorngTime.setText("Worng    :" + ++worngTime );
				
				this.fLimitTime.setText("Attempts :" + --limitTime );
				if(limitTime==0){
					messageBox(false,300,200,function(){
						game.state.add("breakWallGame", breakWallGame);
						game.state.start("breakWallGame");
				        worngTime=0;
					}),this;
				}
			}
		}
		
	}
	

};
breakWallGame.prototype.render = function () {
	this.game.debug.inputInfo(32, 32);
};

function generateElement(element){
	elements[elements.length] = element;
}
function resetElement(){

	if (playerInput!=null){
	playerInput.destroy();
	playerInput = game.add.group();
	playerInput.x = 120;
	playerInput.y = 330;
	}
	elements = new Array();
	currentRow=0;
	currentCol=0;
}

function addPlayerInputList(element){
	if (playerInput.children.length==0){
		firstElement = playerInput.createMultiple(1,'Attributes',element,true);
	}else{
		playerInput.createMultiple(1,'Attributes',element,true);
	}
    if ((playerInput.children.length) % 20 == 0 && (playerInput.children.length) != 0){
    	//currentRow = Math.round(playerInput.length/20);
    	
    }
    
	//playerInput.align(90, 50, 90, 90);
    playerInputList[currentRow][currentCol]=playerInput.children[playerInput.children.length-1];
    playerInput.children[playerInput.children.length-1].y += currentRow*90;
    playerInput.children[playerInput.children.length-1].x += currentCol*90;
    currentCol+=1;
    playerInput.scale.set(0.5);
    return playerInput;
}
function addweaknessGroupGame1(weakness){
	weaknessGroup.x = 120;
	weaknessGroup.y = 30;
	for(i=0;i<weakness.length;i++){
		weaknessGroup.createMultiple(1,'Attributes',weakness[i],true);
		weaknessGroup.align(90, 50, 90, 0);
		weaknessGroup.scale.set(0.5);
	}
	game.world.bringToTop(weaknessGroup);
    return weaknessGroup;
}

function scrollByArrow(y) {
	
    if(playerInput.alpha>0.3){
    	playerInput.forEach(function(i) {
            i.y+=y/(playerInput.children.length/10);
        }, this);
    }
}
function scrollWeaknessByArrow(y) {
	weakness.forEach(function(item,idx,array){
        if(item.alpha>0.3){
        	item.forEach(function(i) {
                i.y+=y/(array.length/10);
            }, this);
        }
   });
}
function scroll() { 
        if(playerInput.alpha>0.3){
        	playerInput.forEach(function(i,idx,array) {
            	if (array.length >=10){
            		i.y+=game.input.mouse.wheelDelta*9/(Math.floor(playerInput.children.length)/10);
            	}else{
            		i.y+=game.input.mouse.wheelDelta*9;
            	}
            }, this);
        }

}

function randonWeakness(number){
	var weakness =[];
	for (i=0;i<number;i++){
		weakness[i] = Math.floor(Math.random()*5)+1;
	}
	return weakness;
}


// -- user code here --
