
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * breakWallGame.
 */
function breakWallGame() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var breakWallGame_proto = Object.create(Phaser.State.prototype);
breakWallGame.prototype = breakWallGame_proto;
breakWallGame.prototype.constructor = breakWallGame;

breakWallGame.prototype.init = function () {
	
};

breakWallGame.prototype.preload = function () {
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	playerInput = game.add.group();
	weaknessGroup = game.add.group();
	hideGrid(true);
	
};

breakWallGame.prototype.create = function () {
	
	this.blue = game.add.graphics();
	this.blue.beginFill(0x7FFF00);
	this.blue.drawRect( 0,400,1000, 400 );
	this.blue.endFill();
	this.green = game.add.graphics();
	this.green.beginFill(0x98F5FF);
	this.green.drawRect(0,0,1000, 400);
	this.green.endFill();
	addweaknessGroup(randonWeakness(3));
	
	
};

/* --- end generated code --- */
breakWallGame.prototype.update = function () {


};
breakWallGame.prototype.render = function () {
	this.game.debug.inputInfo(32, 32);
};

function generateElement(element){
	elements[elements.length] = element;
}
function resetElement(){
	playerInput.destroy();
	playerInput = game.add.group();
	playerInput.x = 1030;
	playerInput.y = 276;
	elements = new Array();
}

function addPlayerInputList(element){
	if (playerInput.children.length==0){
		firstElement = playerInput.createMultiple(1,'Attributes',element,true);
	}else{
		playerInput.createMultiple(1,'Attributes',element,true);
	}
    if ((playerInput.children.length) % 10 == 0 && (playerInput.children.length) != 0){
    	playerInput.y-=405;
    }
    playerInput.align(1, 999, 0, 90);
    playerInput.scale.set(0.5);
    return playerInput;
}
function addweaknessGroup(weakness){
	weaknessGroup.x = 340;
	weaknessGroup.y = 34;
	for(i=0;i<weakness.length;i++){
		weaknessGroup.createMultiple(1,'Attributes',weakness[i],true);
		if ((weakness.length) % 10 == 0 && (weakness.length) != 0){
	    	weaknessGroup.x-=400;
	    }
		weaknessGroup.align(90, 50, 90, 0);
		weaknessGroup.scale.set(0.5);
	}
	game.world.bringToTop(weaknessGroup);
    return weaknessGroup;
}

function scrollByArrow(y) {
	
    if(playerInput.alpha>0.3){
    	playerInput.forEach(function(i) {
            i.y+=y/(playerInput.children.length/10);
        }, this);
    }
}
function scrollWeaknessByArrow(y) {
	weakness.forEach(function(item,idx,array){
        if(item.alpha>0.3){
        	item.forEach(function(i) {
                i.y+=y/(array.length/10);
            }, this);
        }
   });
}
function scroll() { 
        if(playerInput.alpha>0.3){
        	playerInput.forEach(function(i,idx,array) {
            	if (array.length >=10){
            		i.y+=game.input.mouse.wheelDelta*9/(Math.floor(playerInput.children.length)/10);
            	}else{
            		i.y+=game.input.mouse.wheelDelta*9;
            	}
            }, this);
        }

}
function checkInput(){
	var count=0;
	for (i = 0;i<playerInput.children.length-1;i++){
		alert(playerInput.length+":"+weaknessGroup.length);
		if (playerInput.children[i].frameName==weaknessGroup.children[i].frameName){
			count+=1;
		}
	}
	if (count==weaknessGroup.children.length){
		correct = true;
	}
}
function randonWeakness(number){
	var weakness =[];
	for (i=0;i<number;i++){
		weakness[i] = Math.floor(Math.random()*5)+1;
	}
	return weakness;
}
// -- user code here --
