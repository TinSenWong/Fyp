
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * game1.
 */
function game1() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var game1_proto = Object.create(Phaser.State.prototype);
game1.prototype = game1_proto;
game1.prototype.constructor = game1;

game1.prototype.init = function () {
	
};

game1.prototype.preload = function () {
	
	this.load.nineSlice('btn', 'assets/image/btn_clean.png', 20, 23, 27, 28);
			
		
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	
};

game1.prototype.create = function () {
	
	this.initScene();
	
	var _magic = this.add.sprite(184.0, 664.0, 'magic');
	_magic.scale.setTo(1.2021289068867396, 1.2662553444408484);
	
	var _magicScroll = this.add.sprite(-21.0, 97.0, 'magicScroll');
	_magicScroll.scale.setTo(2.9219199360104247, 3.188193756629527);
	
	var _ansGroup = this.add.group();
	
	var _ansPosition2 = this.add.sprite(159.0, 243.0, 'ansPosition', 0, _ansGroup);
	_ansPosition2.scale.setTo(0.5512193711095514, 0.47368424656941077);
	_ansPosition2.anchor.setTo(0.5, 0.5);
	this.game.physics.arcade.enable(_ansPosition2);
	_ansPosition2.body.setSize(62.527992248535156, 58.29010009765625, 31.495838165283203, 23.456796646118164);
	
	var _ansPosition1 = this.add.sprite(264.0, 325.0, 'ansPosition', 0, _ansGroup);
	_ansPosition1.scale.setTo(0.5512193711095514, 0.47368424656941077);
	_ansPosition1.anchor.setTo(0.5, 0.5);
	this.game.physics.arcade.enable(_ansPosition1);
	_ansPosition1.body.setSize(99.06319427490234, 86.14503479003906, 11.338497161865234, 14.66048812866211);
	
	var _ansPosition = this.add.tileSprite(137.0, 300.0, 123.0, 114.0, 'ansPosition', 0, _ansGroup);
	_ansPosition.scale.setTo(0.5512193711095514, 0.47368424656941077);
	_ansPosition.alpha = 4.0;
	this.game.physics.arcade.enable(_ansPosition);
	_ansPosition.body.setSize(101.5828628540039, 89.07719421386719, 11.338497161865234, 10.262321472167969);
	_ansPosition.body.bounce.x = 1.0;
	_ansPosition.body.bounce.y = 1.0;
	
	var _magicbook = this.add.sprite(593.0, 169.0, 'magicbook');
	_magicbook.scale.setTo(1.4976639034935468, 1.6359039709291385);
	
	var _Attributes = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_Attributes.position.setTo(-1.0, -1.0);
	
	var _terra = this.add.sprite(212.0, 773.0, 'Attributes', 'terra', _Attributes);
	_terra.scale.setTo(0.5199998985185398, 0.5636362374094385);
	_terra.anchor.setTo(0.5, 0.5);
	_terra.body.setCircle(38.5, 19.321063995361328, 4.278034210205078);
	
	var _Thunder = this.add.sprite(192.0, 710.0, 'Attributes', 'Thunder', _Attributes);
	_Thunder.scale.setTo(0.8628571063178712, 0.5538463300881171);
	_Thunder.anchor.setTo(0.5, 0.5);
	_Thunder.body.setCircle(17.5, -2.328756332397461, 15.237896919250488);
	
	var _water = this.add.sprite(300.0, 710.0, 'Attributes', 'water', _Attributes);
	_water.scale.setTo(0.7360000675251507, 0.6526316591816703);
	_water.anchor.setTo(0.5, 0.5);
	_water.body.setCircle(25.0, -0.6552162170410156, 14.039745330810547);
	
	var _wood = this.add.sprite(280.0, 773.0, 'Attributes', 'wood', _Attributes);
	_wood.scale.setTo(0.7090907970983089, 0.6684209058433127);
	_wood.anchor.setTo(0.5, 0.5);
	_wood.body.setCircle(33.0, 1.1334800720214844, 6.012378692626953);
	
	var _fire = this.add.sprite(249.0, 658.0, 'Attributes', 'fire', _Attributes);
	_fire.scale.setTo(0.6852457119694998, 0.5550561384930743);
	_fire.anchor.setTo(0.5, 0.5);
	_fire.body.setCircle(30.5, -1.4661884307861328, 16.29067039489746);
	
	var _rightans = this.add.group();
	
	var _rightansPosition2 = this.add.sprite(891.0, 304.0, 'ansPosition', 0, _rightans);
	_rightansPosition2.scale.setTo(0.6066338691568852, 0.5149474140978532);
	_rightansPosition2.anchor.setTo(0.5, 0.5);
	
	var _rightansPosition1 = this.add.sprite(1022.0, 301.0, 'ansPosition', 0, _rightans);
	_rightansPosition1.scale.setTo(0.6066338691568852, 0.5149474140978532);
	_rightansPosition1.anchor.setTo(0.5, 0.5);
	
	var _rightansPosition = this.add.sprite(749.0, 299.0, 'ansPosition', 0, _rightans);
	_rightansPosition.scale.setTo(0.6066338691568852, 0.5149474140978532);
	_rightansPosition.anchor.setTo(0.5, 0.5);
	
	this.add.sprite(726.0, 247.0, 'Attributes', 'fire', _rightans);
	
	this.add.sprite(861.0, 248.0, 'Attributes', 'fire', _rightans);
	
	this.add.sprite(1001.0, 257.0, 'Attributes', 'water', _rightans);
	
	this.add.text(89.0, 234.0, 'a =', {"font":"bold 20px Arial"});
	
	this.add.text(89.0, 315.0, 'b =', {"font":"bold 20px Arial"});
	
	this.add.text(94.0, 402.0, '輸出 b , a;', {"font":"bold 20px Arial"});
	
	this.add.text(203.0, 234.0, ';', {"font":"bold 20px Arial"});
	
	this.add.text(319.0, 319.0, ';', {"font":"bold 20px Arial"});
	
	var _inputfield = this.add.tileSprite(603.0, 657.0, 51.0, 65.0, 'inputfield', null);
	_inputfield.scale.setTo(11.637703665664196, 2.0625111183470577);
	
	var _output = this.add.group();
	
	var _outputPosition = this.add.tileSprite(1051.0, 724.0, 123.0, 114.0, 'ansPosition', 0, _output);
	_outputPosition.anchor.setTo(0.5, 0.5);
	
	var _outputPosition1 = this.add.sprite(886.0, 728.0, 'ansPosition', 0, _output);
	_outputPosition1.anchor.setTo(0.5, 0.5);
	
	var _outputPosition2 = this.add.sprite(727.0, 728.0, 'ansPosition', 0, _output);
	_outputPosition2.anchor.setTo(0.5, 0.5);
	
	var _ansAttributes = this.add.group();
	
	var _cloneAns = this.add.group();
	
	var _monster = this.add.sprite(1184.0, 0.0, 'monster', 'sprite2');
	_monster.scale.setTo(-3.039040655493502, 3.384639910744491);
	var _monster_player = _monster.animations.add('player', ['sprite3', 'sprite4'], 2, true);
	var _monster_destroy = _monster.animations.add('destroy', ['sprite10', 'sprite11', 'sprite12', 'sprite13', 'sprite14', 'sprite9'], 6, false);
	_monster_destroy.killOnComplete = true;
	_monster_player.play();
	
	var _HPGroup = this.add.group();
	
	var _hp3 = this.add.sprite(259.0, 37.0, 'hp heart', 0, _HPGroup);
	_hp3.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp3.animations.add('play', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _hp2 = this.add.sprite(148.0, 37.0, 'hp heart', 0, _HPGroup);
	_hp2.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp2.animations.add('play', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _hp1 = this.add.sprite(37.0, 37.0, 'hp heart', 0, _HPGroup);
	_hp1.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp1.animations.add('play', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	_Attributes.setAll("inputEnabled", true);
	
	
	// fields
	
	this.fAnsGroup = _ansGroup;
	this.fAnsPosition2 = _ansPosition2;
	this.fAnsPosition1 = _ansPosition1;
	this.fAnsPosition = _ansPosition;
	this.fAttributes = _Attributes;
	this.fTerra = _terra;
	this.fThunder = _Thunder;
	this.fWater = _water;
	this.fWood = _wood;
	this.fFire = _fire;
	this.fOutput = _output;
	this.fAnsAttributes = _ansAttributes;
	this.fCloneAns = _cloneAns;
	this.fMonster = _monster;
	this.fHPGroup = _HPGroup;
	hideGame(true);
	_Attributes.callAll('events.onInputDown.add', 'events.onInputDown', clone, this);
	//_Attributes.callAll('input.enableDrag', 'input');
	submitBtn.events.onInputDown.add(clearPutAns,this);
	submitBtn.events.onInputDown.add(show,this);
	submitBtn.events.onInputDown.add(clearShowAns,this);
	resetBtn.events.onInputDown.add(clearShowAns,this);
			
	this.shadowTexture = this.game.add.bitmapData(this.game.width, this.game.height);
	var lightSprite = this.game.add.image(0, 0, this.shadowTexture);
	
	    // Set the blend mode to MULTIPLY. This will darken the colors of
	    // everything below this sprite.
	    lightSprite.blendMode = Phaser.blendModes.MULTIPLY;
	
	    // Simulate a pointer click/tap input at the center of the stage
	    // when the example begins running.
	    this.game.input.activePointer.x = this.game.width/2;
	    this.game.input.activePointer.y = this.game.height/2;
	
};

/* --- end generated code --- */
game1.prototype.update = function () {

};
game1.prototype.ShowAttack = function() {
    // This function updates the shadow texture (this.shadowTexture).
	
    // Draw shadow
    this.shadowTexture.context.fillStyle = 'rgb(100, 100, 100)';
    this.shadowTexture.context.fillRect(0, 0, this.game.width, this.game.height);

    // This just tells the engine it should update the texture cache
    this.shadowTexture.dirty = true;
    //
    for (i = 0; i < this.fAnsAttributes.children.length;i++){
    	var ans = this.fAnsAttributes.children[i];
		tween = this.add.tween(ans).to({ x: this.game.width/2, y: this.game.height/2}, 500, "Linear", true, 500);
    }
	//amination: this.add.tween(ans).to({ x: -200 }, 7500, Phaser.Easing.Quadratic.InOut, true, 0, 1000, false);
	tween.onComplete.add(OnTweenComplete,this);
	
	
    
};
function OnTweenComplete(){
	tween.pause();
	this.fAnsAttributes.destroy();
	var _fireball = this.add.sprite(481.0, 370.0, 'fireball', 24);
	_fireball.scale.setTo(1.9674997027108243, 1.5625000174710881);
	var _fireball_play = _fireball.animations.add('play', [24, 25, 26, 27, 28, 29, 30, 31], 10, true);
	_fireball_play.play();
	
	tween = this.add.tween(_fireball).to({ x: 1000, y: 60}, 1000, "Linear", true, 500);   
	tween.onComplete.add(function() {
		_fireball.destroy();
		this.fMonster.play('destroy').onComplete.add(function(){
			game1Pass = true;
			alert("你打贏了 貪食怪!");
			hideGame(false);
			this.state.add("Level04", Level04);
			this.state.start("Level04");
		}, this);
	},this);
	
}


function clone(obj){
	var DragStop = false;
	var isAns= true;
	
	var clone = this.add.sprite(obj.x, obj.y, obj.key, obj.frame,this.fCloneAns);
	  clone.inputEnabled = true;
	  clone.input.enableDrag(true);
	  clone.scale.setTo(0.6852457119694998, 0.5550561384930743);
	  clone.anchor.setTo(0.5, 0.5);
	  clone.events.onInputOver.add(function(clone, pointer){
		  if (!DragStop){
			  clone.input.startDrag(pointer);
		  }
	  },this);
	  clone.events.onDragStop.add(function(clone, pointer){
		  DragStop = true;
		  isAns=false;
		    for (var i = 0; i < this.fAnsGroup.children.length;i++){
		    	//
		    	/*if (this.physics.arcade.collide(this.fAnsGroup.children[i], clone)){
		    		this.fAnsGroup.children[i].name = clone.frameName;
	    			isAns = false;
	    			alert();
	    			break;
		    	}*/
		    	if(checkOverlap(this.fAnsGroup.children[i],clone )) {
		    	    this.fAnsGroup.children[i].name = clone.frameName;
	    			isAns = true;
		    	    break;
		    	}
		    	
			}
		    if (!isAns){
		    	clone.destroy();
		    }
		    //lock(clone,isAns);
		    try{
		    	//alert(this.fAnsGroup.children[i].name);
		    }catch(err){
		    	
		    }
		    },this);
}	  

function check(_ansGroup) {   
	//for (i = 0; i < _ansGroup.children.length;i++){
	var isCorrect = false;
	
	if(_ansGroup.children[0].name == "water") {
		if(_ansGroup.children[1].name == "fire") {
			if(_ansGroup.children[2].name == "fire") {
				isCorrect = true;
        	}
    	}
	}
	return isCorrect;
}

function show(){
	
	
	btn_Submit=true;
	_ansGroup = this.fAnsGroup;
	iscomplete = true;
	
	for (i = 0; i < _ansGroup.children.length;i++){
		if (_ansGroup.children[i].name==""){
			iscomplete=false;
			alert("Is Not complete");
			break;
		}
	}
	if(iscomplete){
		
		for (i = 0; i < _ansGroup.children.length;i++){
			if (_ansGroup.children[i].name!=""){
				displayAns = this.add.sprite(this.fOutput.children[i].x, this.fOutput.children[i].y, 'Attributes', _ansGroup.children[i].name, this.fAnsAttributes);
				displayAns.anchor.setTo(0.5,0.5);
				//amination: this.add.tween(ans).to({ x: -200 }, 7500, Phaser.Easing.Quadratic.InOut, true, 0, 1000, false);
				
			}
		}
		if (check(_ansGroup)) {
			this.ShowAttack();
		}else{
			this.fCloneAns.clear;
			hp -= 1;
			this.fHPGroup.children[hp].play('play');
			if (hp == 0){
				confirm('你死了  重新遊玩');
				hideGame(false);
				this.state.add("Level04", Level04);
				this.state.start("Level04");
			}
		}
	}
	
}

var btn_Submit = false;
var submitBtn,resetBtn;
game1.prototype.initScene = function () {
	var _bg = this.add.sprite(0, 0, 'bg');
	_bg.scale.setTo(1, 1);
	submitBtn = this.add.nineSlice(490, 368, 'btn', null, 100, 70);
	resetBtn = this.add.nineSlice(490, 465, 'btn', null, 100, 70);
    //this.fAttack.sprite.x = this.scale.width/2+15;
    //this.fAttack.sprite.y = this.scale.height/2+50;
    
    this.add.text(515, 382, '攻擊', {"font":"bold 20px Arial"});
    this.add.text(515, 483, '重設', {"font":"bold 20px Arial"});
	submitBtn.inputEnabled = true;
    submitBtn.input.useHandCursor = true;
    resetBtn.inputEnabled = true;
    resetBtn.input.useHandCursor = true;
   
};


game1.prototype.render = function () {
	//this.game.debug.inputInfo(32, 150);
	//this.game.debug.spriteInfo(this.fAnsGroup.children[2], 32, 32);
};

function clearPutAns(){
	length = this.fAnsAttributes.length;
	for (i = 0; i < length;i++){
		this.fAnsAttributes.removeAll(true);
	}
}
function clearShowAns(){

	length = this.fCloneAns.length;
	for (i = 0; i < length;i++){
		this.fCloneAns.removeAll(true);
	}

}

function checkOverlap(spriteA, spriteB) {
	
    var boundsA = spriteA.getBounds();
    var boundsB = spriteB.getBounds();
    return Phaser.Rectangle.intersects(boundsA, boundsB);
}

// -- user code here --
var displayAns;
var cloneAns;
var hp = 3;