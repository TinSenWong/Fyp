
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * game2.
 */
function game2() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var game2_proto = Object.create(Phaser.State.prototype);
game2.prototype = game2_proto;
game2.prototype.constructor = game2;

game2.prototype.init = function () {
	
};

game2.prototype.preload = function () {
	
	this.load.nineSlice('btn', 'assets/image/btn_clean.png', 20, 23, 27, 28);
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	
};

game2.prototype.create = function () {
	
	this.initScene();
	
	var _magic = this.add.sprite(205.0, 663.0, 'magic');
	_magic.scale.setTo(1.2021289068867396, 1.2662553444408484);
	
	var _magicScroll = this.add.sprite(0.0, 96.0, 'magicScroll');
	_magicScroll.scale.setTo(2.9219199360104247, 3.188193756629527);
	
	var _magicbook = this.add.sprite(608.0, 160.0, 'magicbook');
	_magicbook.scale.setTo(1.6632639862702872, 2.33670394786625);
	
	var _ansGroup = this.add.group();
	_ansGroup.position.setTo(576.0, 160.0);
	
	var _ansPosition2 = this.add.tileSprite(448.0, 128.0, 123.0, 114.0, 'ansPosition', 0, _ansGroup);
	_ansPosition2.scale.setTo(0.5512193711095514, 0.47368424656941077);
	_ansPosition2.alpha = 4.0;
	this.game.physics.arcade.enable(_ansPosition2);
	_ansPosition2.body.setSize(0.0, 0.0);
	_ansPosition2.body.bounce.x = 1.0;
	_ansPosition2.body.bounce.y = 1.0;
	
	var _ansPosition1 = this.add.tileSprite(288.0, 128.0, 123.0, 114.0, 'ansPosition', 0, _ansGroup);
	_ansPosition1.scale.setTo(0.5512193711095514, 0.47368424656941077);
	_ansPosition1.alpha = 4.0;
	this.game.physics.arcade.enable(_ansPosition1);
	_ansPosition1.body.setSize(0.0, 0.0);
	_ansPosition1.body.bounce.x = 1.0;
	_ansPosition1.body.bounce.y = 1.0;
	
	var _ansPosition = this.add.tileSprite(128.0, 128.0, 123.0, 114.0, 'ansPosition', 0, _ansGroup);
	_ansPosition.scale.setTo(0.5512193711095514, 0.47368424656941077);
	_ansPosition.alpha = 4.0;
	this.game.physics.arcade.enable(_ansPosition);
	_ansPosition.body.setSize(0.0, 0.0);
	_ansPosition.body.bounce.x = 1.0;
	_ansPosition.body.bounce.y = 1.0;
	
	var _Attributes = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_Attributes.position.setTo(20.0, -2.0);
	
	var _rightans = this.add.group();
	_rightans.position.setTo(21.0, -1.0);
	
	var _rightansPosition2 = this.add.sprite(173.0, 321.0, 'ansPosition', 0, _rightans);
	_rightansPosition2.scale.setTo(0.6066338691568852, 0.5149474140978532);
	_rightansPosition2.anchor.setTo(0.5, 0.5);
	
	var _rightansPosition1 = this.add.sprite(265.0, 324.0, 'ansPosition', 0, _rightans);
	_rightansPosition1.scale.setTo(0.6066338691568852, 0.5149474140978532);
	_rightansPosition1.anchor.setTo(0.5, 0.5);
	
	var _rightansPosition = this.add.sprite(162.0, 247.0, 'ansPosition', 0, _rightans);
	_rightansPosition.scale.setTo(0.6066338691568852, 0.5149474140978532);
	_rightansPosition.anchor.setTo(0.5, 0.5);
	
	this.add.text(110.0, 233.0, 'a =', {"font":"bold 20px Arial"});
	
	this.add.text(110.0, 314.0, 'b =', {"font":"bold 20px Arial"});
	
	this.add.text(115.0, 401.0, '輸出 b , a;', {"font":"bold 20px Arial"});
	
	this.add.text(224.0, 233.0, ';', {"font":"bold 20px Arial"});
	
	this.add.text(340.0, 318.0, ';', {"font":"bold 20px Arial"});
	
	var _ansAttributes = this.add.group();
	_ansAttributes.position.setTo(21.0, -1.0);
	
	var _cloneAns = this.add.group();
	_cloneAns.position.setTo(21.0, -1.0);
	
	var _HPGroup = this.add.group();
	_HPGroup.position.setTo(21.0, -1.0);
	
	var _hp3 = this.add.sprite(259.0, 37.0, 'hp heart', 0, _HPGroup);
	_hp3.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp3.animations.add('play', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _hp2 = this.add.sprite(148.0, 37.0, 'hp heart', 0, _HPGroup);
	_hp2.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp2.animations.add('play', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _hp1 = this.add.sprite(37.0, 37.0, 'hp heart', 0, _HPGroup);
	_hp1.scale.setTo(2.1492804711165077, 2.1492807122751274);
	_hp1.animations.add('play', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 60, false);
	
	var _monster = this.add.sprite(1184.0, 0.0, 'monster', 'sprite2');
	_monster.scale.setTo(-3.039040655493502, 3.384639910744491);
	var _monster_player = _monster.animations.add('player', ['sprite3', 'sprite4'], 2, true);
	var _monster_destroy = _monster.animations.add('destroy', ['sprite10', 'sprite11', 'sprite12', 'sprite13', 'sprite14', 'sprite9'], 6, false);
	_monster_destroy.killOnComplete = true;
	_monster_player.play();
	
	_Attributes.setAll("inputEnabled", true);
	
	
	// fields
	
	this.fAnsGroup = _ansGroup;
	this.fAnsPosition2 = _ansPosition2;
	this.fAnsPosition1 = _ansPosition1;
	this.fAnsPosition = _ansPosition;
	this.fAttributes = _Attributes;
	this.fAnsAttributes = _ansAttributes;
	this.fCloneAns = _cloneAns;
	this.fHPGroup = _HPGroup;
	this.fMonster = _monster;
	hideGame(true);
	_Attributes.callAll('events.onInputDown.add', 'events.onInputDown', clone, this);
	submitBtn.events.onInputDown.add(clearPutAns,this);
	submitBtn.events.onInputDown.add(show2,this);
	submitBtn.events.onInputDown.add(clearShowAns,this);
	resetBtn.events.onInputDown.add(clearShowAns,this);
	
	this.shadowTexture = this.game.add.bitmapData(this.game.width, this.game.height);
	var lightSprite = this.game.add.image(0, 0, this.shadowTexture);
		lightSprite.blendMode = Phaser.blendModes.MULTIPLY;
		
		    // Simulate a pointer click/tap input at the center of the stage
		    // when the example begins running.
		    this.game.input.activePointer.x = this.game.width/2;
		    this.game.input.activePointer.y = this.game.height/2;
		
	
};

/* --- end generated code --- */
game2.prototype.initScene = function () {
	var _bg = this.add.sprite(0, 0, 'bg');
	_bg.scale.setTo(1, 1);
	submitBtn = this.add.nineSlice(490, 368, 'btn', null, 100, 70);
	resetBtn = this.add.nineSlice(490, 465, 'btn', null, 100, 70);
    //this.fAttack.sprite.x = this.scale.width/2+15;
    //this.fAttack.sprite.y = this.scale.height/2+50;
    
    this.add.text(515, 382, '攻擊', {"font":"bold 20px Arial"});
    this.add.text(515, 483, '重設', {"font":"bold 20px Arial"});
	submitBtn.inputEnabled = true;
    submitBtn.input.useHandCursor = true;
    resetBtn.inputEnabled = true;
    resetBtn.input.useHandCursor = true;
   
};
function show2(){
	btn_Submit=true;
	_ansGroup = this.fAnsGroup;
	iscomplete = true;
	
	for (i = 0; i < _ansGroup.children.length;i++){
		if (_ansGroup.children[i].name==""){
			iscomplete=false;
			alert("Is Not complete");
			break;
		}
	}
	if(iscomplete){

		if (check(_ansGroup)) {
			this.ShowAttack();
		}else{
			this.fCloneAns.clear;
			hp -= 1;
			this.fHPGroup.children[hp].play('play');
			if (hp == 0){
				confirm('你死了  重新遊玩');
				this.state.add("Level05", Level05);
				this.state.start("Level05");
			}
		}
	}
	
}
game2.prototype.ShowAttack = function() {
    // This function updates the shadow texture (this.shadowTexture).
	var tween;
    // Draw shadow
    this.shadowTexture.context.fillStyle = 'rgb(100, 100, 100)';
    this.shadowTexture.context.fillRect(0, 0, this.game.width, this.game.height);

    // This just tells the engine it should update the texture cache
    this.shadowTexture.dirty = true;
    //
    
    for (i = 0; i < this.fCloneAns.children.length;i++){
    	var ans = this.fCloneAns.children[i];
		tween = this.add.tween(ans).to({ x: this.game.width/2, y: this.game.height/2}, 500, "Linear", true, 500);
    }
	//amination: this.add.tween(ans).to({ x: -200 }, 7500, Phaser.Easing.Quadratic.InOut, true, 0, 1000, false);
	tween.onComplete.add(function(){
		tween.pause();
		this.fCloneAns.destroy();
		var _fireball = this.add.sprite(481.0, 370.0, 'fireball', 24);
		_fireball.scale.setTo(1.9674997027108243, 1.5625000174710881);
		var _fireball_play = _fireball.animations.add('play', [24, 25, 26, 27, 28, 29, 30, 31], 10, true);
		_fireball_play.play();
		
		tween = this.add.tween(_fireball).to({ x: 1000, y: 60}, 1000, "Linear", true, 500);   
		tween.onComplete.add(function() {
			_fireball.destroy();
			this.fMonster.play('destroy').onComplete.add(function(){
				game2Pass = true;
				alert("你打贏了 貪食怪!");
				hideGame(false);
				this.state.add("Level05", Level05);
				this.state.start("Level05");
			}, this);
		},this);
	},this);
};


// -- user code here --
var tween;