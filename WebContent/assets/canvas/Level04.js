
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * Level04.
 */
function Level04() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level04_proto = Object.create(Phaser.State.prototype);
Level04.prototype = Level04_proto;
Level04.prototype.constructor = Level04;

Level04.prototype.init = function () {
	
};

Level04.prototype.preload = function () {
	
	this.load.pack('maze', 'assets/pack.json');
	
};

Level04.prototype.create = function () {
	var _bottomLayer = this.add.tilemap('bottomLayer', 32, 32);
	_bottomLayer.addTilesetImage('base_out_atlas1');
	var _bottomLayer_layer = _bottomLayer.createLayer(0);
	_bottomLayer_layer.resizeWorld();
	
	var _BlockLayer = this.add.tilemap('BlockLayer', 32, 32);
	_BlockLayer.addTilesetImage('base_out_atlas1');
	_BlockLayer.setCollision([38,234]);
	var _BlockLayer_layer = _BlockLayer.createLayer(0);
	_BlockLayer_layer.resizeWorld();
	
	var _MidLayer = this.add.tilemap('MidLayer', 32, 32);
	_MidLayer.addTilesetImage('base_out_atlas1');
	var _MidLayer_layer = _MidLayer.createLayer(0);
	_MidLayer_layer.resizeWorld();
	
	var _player = this.add.sprite(5664.0, 320.0, 'atlas', 'misa-front-walk.000');
	_player.animations.add('Back', ['misa-back-walk.000', 'misa-back-walk.001', 'misa-back-walk.002', 'misa-back-walk.003'], 6, true);
	_player.animations.add('Left', ['misa-left-walk.000', 'misa-left-walk.001', 'misa-left-walk.002', 'misa-left-walk.003'], 6, true);
	_player.animations.add('Front', ['misa-front-walk.000', 'misa-front-walk.001', 'misa-front-walk.002', 'misa-front-walk.003'], 6, true);
	_player.animations.add('Right', ['misa-right-walk.000', 'misa-right-walk.001', 'misa-right-walk.002', 'misa-right-walk.003'], 6, true);
	_player.animations.add('BackStay', ['misa-back'], 6, false);
	_player.animations.add('FrontStay', ['misa-front'], 6, false);
	_player.animations.add('LeftStay', ['misa-left'], 6, false);
	_player.animations.add('RightStay', ['misa-right'], 6, false);
	this.game.physics.arcade.enable(_player);
	_player.body.setSize(32.0, 32.0, 0.0, 32.0);
	
	var _keyYellow = this.add.sprite(5792.0, 352.0, 'keyYellow');
	_keyYellow.scale.setTo(0.45714285714285713, 0.45714285714285713);
	this.game.physics.arcade.enable(_keyYellow);
	
	var _treasure_chest = this.add.sprite(5600.0, 320.0, 'treasure chest1', 0);
	_treasure_chest.scale.setTo(0.9142857142857143, 0.9142857142857143);
	_treasure_chest.animations.add('open', [1, 2, 3, 4, 5, 6], 8, false);
	this.game.physics.arcade.enable(_treasure_chest);
	
	var _monster = this.add.sprite(5728.0, 352.0, 'monster', 'sprite1');
	_monster.scale.setTo(0.64, 0.64);
	var _monster_Auto = _monster.animations.add('Auto', ['sprite1', 'sprite2', 'sprite6'], 2, true);
	_monster_Auto.play();
	this.game.physics.arcade.enable(_monster);
	
	
	
	// fields
	
	this.fBottomLayer = _bottomLayer;
	this.fBottomLayer_layer = _bottomLayer_layer;
	this.fBlockLayer = _BlockLayer;
	this.fBlockLayer_layer = _BlockLayer_layer;
	this.fMidLayer = _MidLayer;
	this.fMidLayer_layer = _MidLayer_layer;
	this.fPlayer = _player;
	this.fKeyYellow = _keyYellow;
	this.fTreasure_chest = _treasure_chest;
	this.fMonster = _monster;
	this.cursors = this.input.keyboard.createCursorKeys();
	this.fPlayer.body.collideWorldBounds=true;
	if (game1Pass){
		this.fPlayer.x = playerX;
		this.fPlayer.y = playerY;
		this.fMonster.destroy();
	}
	this.camera.setPosition(5120,0);
	
};

/* --- end generated code --- */
Level04.prototype.update = function () {
	if (this.fMonster.exists){
		this.physics.arcade.collide(this.fPlayer, this.fMonster,function (){
			playerX = this.fMonster.x;
			
			playerY = this.fMonster.y-32;
			this.state.add("game1", game1);
			this.state.start("game1");
		}, null, this);
	}
	
	this.fTreasure_chest.x = 5600.0;
	this.fTreasure_chest.y = 320.0;
	this.fPlayer.body.velocity.set(0);
	if (this.fKeyYellow.exists){
		this.physics.arcade.collide(this.fPlayer,this.fKeyYellow, getKey, null, this);
	}
	this.physics.arcade.collide(this.fPlayer,this.fTreasure_chest,IsOpenChest, null, this);
	
	this.physics.arcade.collide(this.fPlayer,this.fBlockLayer_layer);
	if (testmode){
		if (this.cursors.left.isDown)
	    {
	    	// move to the left
			
	    	this.fPlayer.play('Left');
	    	this.fPlayer.body.velocity.x -= 150;
	    	//this.fPlayer.body.x -= 32;
	    	play = 'LeftStay';
	        
	    }else if (this.cursors.right.isDown)
	    {
	    	// move to the right
	    	this.fPlayer.play('Right');
	    	this.fPlayer.body.velocity.x += 150;
	    	//this.fPlayer.body.x += 32;
	    	play = 'RightStay';
	    }
	    else  if (this.cursors.up.isDown)
	    {
	    	// move to the up
	    	this.fPlayer.play('Back');
	    	this.fPlayer.body.velocity.y -= 150;
	    	//this.fPlayer.body.y -= 32;
	    	play = 'BackStay';
	    }else if (this.cursors.down.isDown)
	    {
	    	// move to the down
	    	this.fPlayer.play('Front');
	    	this.fPlayer.body.velocity.y += 150;
	    	//this.fPlayer.body.y += 32;
	    	play = 'FrontStay';
	    }else{
	    	this.fPlayer.play(play);
	    }

	}
	if ( goToTheLeft)
    {
    	// move to the left
		//101.05263157894632
		goToTheLeft=false;
    	//tween = this.add.tween(this.fPlayer).to( { x: this.fPlayer.body.velocity.x -= 101.05263157894632});
    	this.fPlayer.body.x -= 32;
    	play = 'LeftStay';
        
    }else if (goToTheRight)
    {
    	// move to the right
    	//tween = this.add.tween(this.fPlayer).to( { x: this.fPlayer.body.velocity.x += 101.5961552827511});
    	goToTheRight=false;
    	this.fPlayer.body.x += 32;
    	play = 'RightStay';
    }
    else  if (goToTheUp)
    {
    	// move to the up
    	//tween = this.add.tween(this.fPlayer).to( { y: this.fPlayer.body.velocity.y -= 101.5961552827511});
    	goToTheUp=false;
    	this.fPlayer.body.y -= 32;
    	play = 'BackStay';
    }else if (goToTheDown)
    {
    	// move to the down
    	//tween = this.add.tween(this.fPlayer).to( { y: this.fPlayer.body.velocity.y += 101.5961552827511});
    	goToTheDown=false;
    	this.fPlayer.body.y += 32;
    	play = 'FrontStay';
    }
};
// -- user code here --
