
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * BlocklyGame1.
 */
function BlocklyGame1() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var BlocklyGame1_proto = Object.create(Phaser.State.prototype);
BlocklyGame1.prototype = BlocklyGame1_proto;
BlocklyGame1.prototype.constructor = BlocklyGame1;

BlocklyGame1.prototype.init = function () {
	
};

BlocklyGame1.prototype.preload = function () {
	
	this.load.image('dude', 'assets/image/phaser-dude.png');
	this.load.pack('maze', 'assets/pack.json');
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	
};

BlocklyGame1.prototype.create = function () {
	
	hideGrid(true);
	
	var _scrollingMap = this.add.group();
	
	var _DownArrow = this.add.sprite(1004.0, 696.0, 'arrow');
	_DownArrow.scale.setTo(3.2499999111367655, 3.1249998635029796);
	
	var _UpArrow = this.add.sprite(1082.0, 274.0, 'arrow');
	_UpArrow.angle = 180.0;
	_UpArrow.scale.setTo(3.2499999111367655, 3.1249998635029796);
	
	var _arrow_horiz_green = this.add.sprite(263.0, 58.0, 'arrow_horiz_green');
	_arrow_horiz_green.angle = 180.0;
	_arrow_horiz_green.scale.setTo(0.19539994060907695, 0.2569600464866019);
	_arrow_horiz_green.anchor.setTo(1.0, 0.5);
	
	var _arrow_horiz_green = this.add.sprite(997.0, 57.0, 'arrow_horiz_green');
	_arrow_horiz_green.angle = 180.0;
	_arrow_horiz_green.scale.setTo(-0.19539994060907695, 0.2569600464866019);
	_arrow_horiz_green.anchor.setTo(1.0, 0.5);
	
	var _sprite = this.add.sprite(410.0, 242.0, 'monster', 'sprite1');
	_sprite.scale.setTo(4.709094305625377, 4.840729181895337);
	_sprite.animations.add('play', ['sprite1', 'sprite2'], 1, true);
	var _sprite_destroy = _sprite.animations.add('destroy', ['sprite10', 'sprite11', 'sprite12', 'sprite13', 'sprite14', 'sprite9'], 5, false);
	_sprite_destroy.killOnComplete = true;
	_sprite_destroy.play();
	
	
	
	// fields
	
	this.fScrollingMap = _scrollingMap;
	this.fDownArrow = _DownArrow;
	this.fUpArrow = _UpArrow;
	this.input.mouse.mouseWheelCallback=scroll;
	_scrollingMap.setAll('inputEnabled', true);
	_scrollingMap.setAll('input.allowHorizontalDrag', false);
	_DownArrow.inputEnabled = true;
	_UpArrow.inputEnabled = true;
	this.playerInputMask = game.add.graphics();
	this.playerInputMask.inputEnabled=true;
	this.playerInputMask.beginFill(0x000000);
	this.playerInputMask.drawRect( -50+1030,276,100, 405 );
	this.playerInputMask.endFill();
	this.WeaknessOutputMask = game.add.graphics();
	this.WeaknessOutputMask.inputEnabled=true;
	this.WeaknessOutputMask.beginFill(0x000000);
	this.WeaknessOutputMask.drawRect(330,30,600, 50);
	this.WeaknessOutputMask.endFill();
	addweaknessGroup(randonWeakness(3));
	
};

/* --- end generated code --- */
BlocklyGame1.prototype.update = function () {
	if(playerInput.children.length==0){
		if (game.input.activePointer.isDown && this.fDownArrow.input.checkPointerOver(game.input.activePointer)&&!(playerInput.children[0].y >= 700)){
			scrollByArrow(5);
		}
	}else if (game.input.activePointer.isDown && this.fUpArrow.input.checkPointerOver(game.input.activePointer)&&!(playerInput.children[playerInput.children.length-1].y >= 700)){
		scrollByArrow(5);
	}
	if (game.input.activePointer.isDown && this.fDownArrow.input.checkPointerOver(game.input.activePointer)&&!(playerInput.children[0].y <= 0)){
				
		scrollByArrow(-5);
	}
	if (correct){
		alert('true');
		correct=false;
	}
	this.WeaknessOutputMask.belongsTo=weaknessGroup;
	weaknessGroup.mask = this.WeaknessOutputMask;
	this.playerInputMask.belongsTo=playerInput;
	playerInput.mask = this.playerInputMask;
};
BlocklyGame1.prototype.render = function () {

	this.game.debug.inputInfo(32, 32);
	
}
function generateElement(element){
	elements[elements.length] = element;
}
function resetElement(){
	playerInput.destroy();
	playerInput = game.add.group();
	
	playerInput.x = 1030;
	playerInput.y = 276;
	elements = new Array();
}

function addPlayerInputList(element){
	if (playerInput.children.length==0){
		firstElement = playerInput.createMultiple(1,'Attributes',element,true);
	}else{
		playerInput.createMultiple(1,'Attributes',element,true);
	}
    if ((playerInput.children.length) % 10 == 0 && (playerInput.children.length) != 0){
    	alert("length:"+playerInput.children.length);
    	playerInput.y-=405;
    }
    playerInput.align(1, 999, 0, 90);
    playerInput.scale.set(0.5);
    return playerInput;
}
function addweaknessGroup(weakness){
	weaknessGroup.x = 340;
	weaknessGroup.y = 34;
	for(i=0;i<weakness.length;i++){
		weaknessGroup.createMultiple(1,'Attributes',weakness[i],true);
		if ((weakness.length) % 10 == 0 && (weakness.length) != 0){
	    	weaknessGroup.x-=400;
	    }
		weaknessGroup.align(90, 50, 90, 0);
		weaknessGroup.scale.set(0.5);
	}
    return weaknessGroup;
}

function scrollByArrow(y) {
	
    if(playerInput.alpha>0.3){
    	playerInput.forEach(function(i) {
            i.y+=y/(playerInput.children.length/10);
        }, this);
    }
}
function scrollWeaknessByArrow(y) {
	weakness.forEach(function(item,idx,array){
        if(item.alpha>0.3){
        	item.forEach(function(i) {
                i.y+=y/(array.length/10);
            }, this);
        }
   });
}
function scroll() { 
        if(playerInput.alpha>0.3){
        	playerInput.forEach(function(i,idx,array) {
            	if (array.length >=10){
            		i.y+=game.input.mouse.wheelDelta*9/(Math.floor(playerInput.children.length)/10);
            	}else{
            		i.y+=game.input.mouse.wheelDelta*9;
            	}
            }, this);
        }

}
function checkInput(){
	var count=0;
	for (i = 0;i<playerInput.children.length;i++){
		if (playerInput.children[i].frameName==weaknessGroup.children[i].frameName){
			count+=1;
		}
	}
	if (count==weaknessGroup.children.length){
		correct = true;
	}
	alert();
	
}
function randonWeakness(number){
	var weakness =[];
	for (i=0;i<number;i++){
		weakness[i] = Math.floor(Math.random()*5)+1;
	}
	return weakness;
}
// -- user code here --
var correct = false;
var tilesprite;
var elements = new Array();
var firstElement;
var frontX = 1030, frontY = 276;
var playerInput = game.add.group();
var weaknessGroup = game.add.group();