
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * breakWallGame2.
 */
function breakWallGame2() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var breakWallGame2_proto = Object.create(Phaser.State.prototype);
breakWallGame2.prototype = breakWallGame2_proto;
breakWallGame2.prototype.constructor = breakWallGame2;

breakWallGame2.prototype.init = function () {
	
};

breakWallGame2.prototype.preload = function () {
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	playerInput = this.add.group();
	weaknessGroup = game.add.group();
	hideGrid(true);
		toolbox = '<xml id="toolbox" style="display: none">';
		toolbox += '  <block type="input"></block>';
		toolbox += '<block type="controls_repeat_ext">';
		toolbox += '   <value name="TIMES">';
		toolbox += '<shadow type="math_number">';
		toolbox += '    <field name="NUM">10</field>';
		toolbox += '</shadow>';
		toolbox += '</value>';
		toolbox += '</block>';
		toolbox += '</xml>';
	changeToolbox(toolbox,20);
	
};

breakWallGame2.prototype.create = function () {
	
	this.playerInputMask = game.add.graphics();
	this.playerInputMask.inputEnabled=true;
	this.playerInputMask.beginFill(0x7FFF00);
	this.playerInputMask.drawRect( 0,400,1000, 400 );
	this.playerInputMask.endFill();
	this.WeaknessOutputMask = game.add.graphics();
	this.WeaknessOutputMask.inputEnabled=true;
	this.WeaknessOutputMask.beginFill(0x98F5FF);
	this.WeaknessOutputMask.drawRect(0,0,1000, 400);
	this.WeaknessOutputMask.endFill();
	addweaknessGroup(randonWeakness(3));
	
	
};

/* --- end generated code --- */
breakWallGame2.prototype.update = function () {
	if (correct){
		alert('true');
		correct=false;
	}

};
breakWallGame2.prototype.render = function () {
	this.game.debug.inputInfo(32, 32);
};

function generateElement(element){
	elements[elements.length] = element;
}
function resetElement(){
	playerInput.destroy();
	playerInput = game.add.group();
	playerInput.x = 24;
	playerInput.y = 450;
	elements = new Array();
	currentRow=0;
}

function addPlayerInputList(element){
	if (playerInput.children.length==0){
		firstElement = playerInput.createMultiple(1,'Attributes',element,true);
	}else{
		playerInput.createMultiple(1,'Attributes',element,true);
		if (playerInput.children.length % 20==0){
	    	currentRow+=1;
	    }
		//playerInput.children[playerInput.children.length-1].x+=playerInput.children[playerInput.children.length-1].x+90;
		//playerInput.children[playerInput.children.length-1].y+=currentRow*90;
	}
    if ((playerInput.children.length) % 10 == 0 && (playerInput.children.length) != 0){
    }
    
    playerInput.align(90, 50, 90, 0);
    //playerInput.align(1, 0, 0, 90);
    playerInput.scale.set(0.5);
    return playerInput;
}
function addweaknessGroup(weakness){
	weaknessGroup.x = 24;
	weaknessGroup.y = 50;
	for(i=0;i<weakness.length;i++){
		weaknessGroup.createMultiple(1,'Attributes',weakness[i],true);
		if ((weakness.length) % 10 == 0 && (weakness.length) != 0){
	    	weaknessGroup.x-=400;
	    }
		weaknessGroup.align(90, 50, 90, 0);
		weaknessGroup.scale.set(0.5);
	}
	game.world.bringToTop(weaknessGroup);
    return weaknessGroup;
}

function scrollByArrow(y) {
	
    if(playerInput.alpha>0.3){
    	playerInput.forEach(function(i) {
            i.y+=y/(playerInput.children.length/10);
        }, this);
    }
}
function scrollWeaknessByArrow(y) {
	weakness.forEach(function(item,idx,array){
        if(item.alpha>0.3){
        	item.forEach(function(i) {
                i.y+=y/(array.length/10);
            }, this);
        }
   });
}
function scroll() { 
    if(playerInput.alpha>0.3){
    	playerInput.forEach(function(i,idx,array) {
        	if (array.length >=10){
        		i.y+=game.input.mouse.wheelDelta*9/(Math.floor(playerInput.children.length)/10);
        	}else{
        		i.y+=game.input.mouse.wheelDelta*9;
        	}
        }, this);
    }

}
function checkInput(){
	var count=0;
	if (playerInput.length==weaknessGroup.length){
		for (i = 0;i<playerInput.children.length;i++){
			//alert(playerInput.length+":"+weaknessGroup.length);
			if (playerInput.children[i].frameName==weaknessGroup.children[i].frameName){
				count+=1;
				console.log(count+"c")
			}else{
				break;
			}
		}
		if (count==weaknessGroup.children.length){
			correct = true;
		}
	}
	
}
function randonWeakness(number){
	var weakness =[];
	for (i=0;i<number;i++){
		weakness[i] = Math.floor(Math.random()*5)+1;
	}
	return weakness;
}
// -- user code here --
