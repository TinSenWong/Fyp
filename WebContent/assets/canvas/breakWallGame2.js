
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * breakWallGame2.
 */
function breakWallGame2() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var breakWallGame2_proto = Object.create(Phaser.State.prototype);
breakWallGame2.prototype = breakWallGame2_proto;
breakWallGame2.prototype.constructor = breakWallGame2;

breakWallGame2.prototype.init = function () {
	
};

breakWallGame2.prototype.preload = function () {
	
	this.load.pack('game', 'assets/pack.json');
	this.load.pack('maze', 'assets/pack.json');
	playerInput = this.add.group();
	weaknessGroup = game.add.group();
	hideGrid(true);
	toolbox = '<xml id="toolbox" style="display: none">';
	toolbox += '  <block type="input"></block>';
	//toolbox += '  <block type="newRow"></block>';
	toolbox += '  <block type="null"></block>';
	//toolbox += '<block type="controls_repeat_ext">';
	//toolbox += '   <value name="TIMES">';
	//toolbox += '<shadow type="math_number">';
	//toolbox += '    <field name="NUM">10</field>';
	//toolbox += '</shadow>';
	//toolbox += '</value>';
	toolbox += '</block>';
	toolbox += '</xml>';
	changeToolbox(toolbox,20);
	limitTime=3;
	round = 3;
	
};

breakWallGame2.prototype.create = function () {
	
	this.playerInputMask = game.add.graphics();
	this.playerInputMask.inputEnabled=true;
	this.playerInputMask.beginFill(0x7FFF00);
	this.playerInputMask.drawRect( 0,400,1000, 400 );
	this.playerInputMask.endFill();
	this.WeaknessOutputMask = game.add.graphics();
	this.WeaknessOutputMask.inputEnabled=true;
	this.WeaknessOutputMask.beginFill(0x98F5FF);
	this.WeaknessOutputMask.drawRect(0,0,1000, 400);
	this.WeaknessOutputMask.endFill();
	addweaknessGroupGame2(randonWeakness(3));
	
	var _worngTime = this.add.text(1000.0, 50.0, 'Worng:'+worngTime, {"font":"bold 28px Arial"});
	var _limitTime = this.add.text(1002.0, 113.0, "Attempts :" + limitTime, {"font":"bold 28px Arial"});
	var _finishTime = this.add.text(997.0, 667.0, 'Finish:'+finish+'/'+round, {"font":"bold 28px Arial"});
	
	this.fWorngTime = _worngTime;
	this.fLimitTime = _limitTime;
	this.fFinishTime = _finishTime;	
	
	
};

/* --- end generated code --- */
breakWallGame2.prototype.update = function () {
	if (correct){
		alert('true');
		correct=false;
	}
	if (finish==round){
		messageBox(true,300,200,function(){
			selectlevel();
		}),this;
	}
	if (checkInput){
		checkInput = false;
		var count=0;
		if (playerInput != null){
			if (playerInput.length==weaknessGroup.length){
				for (i = 0;i<playerInput.children.length;i++){
					//alert(playerInput.length+":"+weaknessGroup.length);
					if (playerInput.children[i].frameName==weaknessGroup.children[i].frameName){
						count+=1;
					}else{
						continue;
					}
				}
			}
			if (count==weaknessGroup.children.length){
				weaknessGroup.destroy();
				game.state.start("breakWallGame");
				
				this.fFinishTime.setText("Finish:    :" + ++finish );
			}else{
				this.fWorngTime.setText("Worng    :" + ++worngTime );
				
				this.fLimitTime.setText("Attempts :" + --limitTime );
				
				if(limitTime==0){
					messageBox(false,300,200,function(){
						game.state.add("breakWallGame2", breakWallGame2);
						game.state.start("breakWallGame2");
				        worngTime=0;
					}),this;
				}
			}
		}
		
	}

};
breakWallGame2.prototype.render = function () {
	this.game.debug.inputInfo(32, 32);
};
function addweaknessGroupGame2(weakness){
	weaknessGroup.x = 24;
	weaknessGroup.y = 50;
	weekCurrentCol=0;
	var randomSpace = Math.floor((Math.random()*weakness.length)-1);
	for(i=0;i<weakness.length;i++){
		weaknessGroup.createMultiple(1,'Attributes',weakness[i],true);
		//if ((weakness.length) % 10 == 0 && (weakness.length) != 0){
	    //	weaknessGroup.x-=400;
	    //}
		if(i==randomSpace){
			
			weekSpace();
		}
		weaknessGroupList[weekCurrentRow][weekCurrentCol]=weaknessGroup.children[weaknessGroup.children.length-1];
		weaknessGroup.children[weaknessGroup.children.length-1].y += weekCurrentRow*90;
		weaknessGroup.children[weaknessGroup.children.length-1].x += weekCurrentCol*90;
		weekCurrentCol+=1;
		weaknessGroup.scale.set(0.5);
	}
	
	game.world.bringToTop(weaknessGroup);
    return weaknessGroup;
}

// -- user code here --
